C语言数据类型：基本类型、结构类型、指针类型、空类型(void)
    基本类型：数值类型、字符类型
        数值类型：整型(短整型short、整形int、长整型long)、浮点型(单精度型float、双精度型double)
        字符类型：char
    结构类型：数组、结构体(struct)、共用体(union)、枚举(enum)
    https://blog.csdn.net/sfg0861/article/details/123854902

反码的意义：将减法变为加法
补码的意义：弥补了加法运算的不足(结果为正数时，需要补码运算)
计算机存储的二进制数是称为机器数吗？
    答(个人)：是
    对于整型来说，数据在内存中存储的格式是补码
    在计算机系统中，数值一律用补码来表示和存储。
    原因是，使用补码可以将符号位和数值域统一处理。
    同时，加法和减法也可以统一处理
机器数是原码、反码还是补码？
    答(个人)：补码

    机器码:6e fd ff ff
    ff ff fd 6e
    1111 1111 1111 1111 1111 1101 0110 1110
    1111 1111 1111 1111 1111 1101 0110 1101
    1000 0000 0000 0000 0000 0010 1001 0010
    =-0010 1001 0010
    =-658

==>
数学公式在线编辑
    https://www.latexlive.com/
example0100.cpp
    单个字符类型无法在控制台输入，因为换行时"\n"会进行覆盖输入。
    在一个cpp文件中调用另一个cpp文件中的方法：定义头文件法
example0200.cpp
    在一个cpp文件中调用另一个cpp文件中的方法：函数调用声明法
example0300.cpp
    1、scanf_s()的使用方法，需要在变量后加变量大小(位数)。
    2、基本数据类型在scanf输入时，都应该用地址&，字符变量可以不加，但为了严谨还是加&
example0400.cpp
    printf打印数据地址时，使用的是%p和&
example0401.cpp
    char(1字节=1*8位)类型的无符号和有符号溢出时取值情况。
    中间量：0x80(0B1000 0000)(无符号：128，有符号：-128)
    最大量：0xFF(0B1111 1111)(无符号：255，有符号：-1)
example0402.cpp
    short(2字节=2*8位)类型的无符号和有符号溢出时取值情况。
    中间量：0x8000(0B1000 0000 0000 0000)(无符号：32768，有符号：-32768)
    最大量：0xFFFF(0B1111 1111 1111 1111)(无符号：65535，有符号：-1)
example0403.cpp
    int(4字节=4*8位)类型的无符号和有符号溢出时取值情况。
    中间量：0x80 00 00 00(0B1000 0000 0000 0000 0000 0000 0000 0000)(无符号：2147483648，有符号：-2147483648)
    最大值：0xFF FF FF FF(0B1111 1111 1111 1111 1111 1111 1111 1111)(无符号：4294967295，有符号：-1)
example0404.cpp
    打印类型变量的大小(字节数)：sizeof(类型变量)
example0405.cpp
    打印有符号和无符号类型变量的大小(字节数)：sizeof(类型变量)
example0406.cpp
    1、单精度型(float)变量有效数字为7位，双精度型(double)变量有效数字为16位。
    2、浮点型数据在机内用指数形式表示：符号位(数符、1位)、指数位(指数+指数符)、小数位(尾数)。
    3-1、指数位决定了取值范围，指数位可以分为有符号和无符号。
        float：8位，0B0111 1111=127，取值范围：2^[-127~128]
        double：11位，0B011 1111 1111=1023，取值范围：2^[-1023~1024]
    3-2、指数位存储时按无符号整数存储(因为以无符号形式存储，所以128可表示，-128不能表示[有符号存储时,0可分为-0和+0,-0表示-128])。以float为例：
        正数：6 =>6(要存储数)+127(指数位偏移量)=133=>0B1000 0101(存储数)
        负数：-3 =>-3(要存储数)+127(指数位偏移量)=124=>0B01111100(存储数)
    4、小数位决定了精度范围
        float：23位，0B111 1111 1111 1111 1111 1111=8388607，最大表示十进制7位，保证表示十进制6位
        double：52位，0B111 1111 .... 1111=4503599627370495，最大表示十进制16位，保证表示十进制15位
    
    ps：数据和机器码之间的转换举例
        (78.375)
        =(0B0100 1110)+(0.375)
        =0B0100 1110+(3/8)
        =0B0100 1110+(1/4+1/8)
        =0B0100 1110+(2^-2+2^-3)
        =0B0100 1110+(0B0.01+0B0.001)
        =0B0100 1110.011
        =1.001110011x2^6
        78.375 = 0 10000101 001110011 00000 00000 0000
        第一部分用来存储符号位(sign)，用来区分正负，0表示正数
        第二部分用来存储指数(exponent)，这里的指数是十进制的 6
        第三部分用来存储小数(fraction)，这里的小数部分是 001110011

        (float)
        机器码:00 c0 9c c2
        c2 9c c0 00
        1100 0010 1001 1100 1100 0000 0000 0000
        1 10000101 001 1100 1100 0000 0000 0000
        -1.001110011x2^(1000 0101-111 1111)
        =-1.001110011x2^(133-127)
        =-1.001110011x2^6
        =-1001110.011
        =-(78+1/(2^2)+1/(2^3))
        =-(78+0.25+0.125)
        =-78.375
        
        (double)89.0
        00 00 00 00 00 40 56 40
        40 56 40 00 00 00 00 00
        01000000 01010110 01000000 00000000 00000000 00000000 00000000 00000000
        0 10000000101 0110010000000000000000000000000000000000000000000000
        =1.011001 x 2^(10000000101 - 01111111111)
        =1.011001 x 2^(110)
        =1.011001 x 2^6
        =1011001
        =89

        (double)99.9
        9a 99 99 99 99 f9 58 40
        40 58 f9 99 99 99 99 9a
        01000000 01011000 11111001 10011001 10011001 10011001 10011001 10011010
        0 10000000101 1000111110011001100110011001100110011001100110011010
        =1.1000111110011001100110011001100110011001100110011010 x 2^(10000000101 - 01111111111)
        =1.1000111110011001100110011001100110011001100110011010 x 2^(110)
        =1.1000111110011001100110011001100110011001100110011010 x 2^6
        =1100011.1110011001100110011001100110011001100110011010
        =99+(1/2+1/4+1/8+1/64+1/128+...)
        =99+(0.5+0.25+0.125+0.015625+0.0078125+...)
        =99+0.8984375+...
        =99.8984375+...
<==